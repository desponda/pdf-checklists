name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  FRONTEND_IMAGE: ${{ github.repository }}-frontend
  BACKEND_IMAGE: ${{ github.repository }}-backend

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.filter.outputs.frontend_changed }}
      backend_changed: ${{ steps.filter.outputs.backend_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for code changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            frontend_changed:
              - 'apps/frontend/**'
            backend_changed:
              - 'apps/backend/**'

  lint-and-test:
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: |
            ./apps/frontend/node_modules
          key: ${{ runner.os }}-npm-frontend-${{ hashFiles('./apps/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-frontend-

      - name: Cache backend dependencies
        uses: actions/cache@v3
        with:
          path: |
            ./apps/backend/node_modules
          key: ${{ runner.os }}-npm-backend-${{ hashFiles('./apps/backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-backend-
      
      - name: Install root dependencies
        run: npm install --no-workspaces
      
      - name: Install frontend dependencies
        working-directory: ./apps/frontend
        run: npm install --no-workspaces
      
      - name: Install backend dependencies
        working-directory: ./apps/backend
        run: npm install --no-workspaces
      
      - name: Run frontend linting
        working-directory: ./apps/frontend
        run: npm run lint
      
      - name: Run backend linting
        working-directory: ./apps/backend
        run: npm run lint
      
      - name: Run frontend tests
        working-directory: ./apps/frontend
        run: npm run test
      
      - name: Run backend tests
        working-directory: ./apps/backend
        run: npm run test
      
      - name: Build frontend
        working-directory: ./apps/frontend
        run: npm run build

  docker-build-push:
    needs: [check-changes, lint-and-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    outputs:
      sha_short: ${{ steps.sha.outputs.sha_short }}
      frontend_built: ${{ steps.frontend_status.outputs.built }}
      backend_built: ${{ steps.backend_status.outputs.built }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get short SHA
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Check if frontend should be built
        id: frontend_check
        run: |
          if [[ "${{ needs.check-changes.outputs.frontend_changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Frontend image
        id: frontend_build
        if: steps.frontend_check.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/frontend
          file: ./apps/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ steps.sha.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Record Frontend build status
        id: frontend_status
        run: |
          if [[ "${{ steps.frontend_check.outputs.should_build }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if backend should be built
        id: backend_check
        run: |
          if [[ "${{ needs.check-changes.outputs.backend_changed }}" == "true" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Backend image
        id: backend_build
        if: steps.backend_check.outputs.should_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./apps/backend
          file: ./apps/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ steps.sha.outputs.sha_short }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Record Backend build status
        id: backend_status
        run: |
          if [[ "${{ steps.backend_check.outputs.should_build }}" == "true" ]]; then
            echo "built=true" >> $GITHUB_OUTPUT
          else
            echo "built=false" >> $GITHUB_OUTPUT
          fi

  update-values:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.docker-build-push.outputs.frontend_built == 'true' || needs.docker-build-push.outputs.backend_built == 'true')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Yq
        uses: mikefarah/yq@master
      
      - name: Update values.yaml with new image tags - ONLY for built components
        run: |
          SHA_SHORT="${{ needs.docker-build-push.outputs.sha_short }}"
          FRONTEND_BUILT="${{ needs.docker-build-push.outputs.frontend_built }}"
          BACKEND_BUILT="${{ needs.docker-build-push.outputs.backend_built }}"
          
          # Only update tags for components that were actually built
          if [[ "$FRONTEND_BUILT" == "true" ]]; then
            echo "Updating frontend tag to ${SHA_SHORT}"
            yq -i '.frontend.tag = "'${SHA_SHORT}'"' helm/pdf-checklists/values.yaml
          else
            echo "Frontend was not rebuilt, keeping existing tag"
          fi
          
          if [[ "$BACKEND_BUILT" == "true" ]]; then
            echo "Updating backend tag to ${SHA_SHORT}"
            yq -i '.backend.tag = "'${SHA_SHORT}'"' helm/pdf-checklists/values.yaml
          else
            echo "Backend was not rebuilt, keeping existing tag"
          fi
      
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci: Update image tags for changed components to ${{ needs.docker-build-push.outputs.sha_short }}"
          file_pattern: 'helm/pdf-checklists/values.yaml'
